#!/usr/bin/env python
import os, sys

_CIMEROOT = os.environ.get("CIMEROOT")
if _CIMEROOT is None:
    raise SystemExit("ERROR: must set CIMEROOT environment variable")

_LIBDIR = os.path.join(_CIMEROOT, "scripts", "Tools")
sys.path.append(_LIBDIR)

from standard_script_setup import *
from CIME.utils import copyifnewer, run_bld_cmd_ensure_logging
from CIME.case import Case
from CIME.build import get_standard_makefile_args
import glob

logger = logging.getLogger(__name__)

def parse_command_line(args, description):
###############################################################################
    parser = argparse.ArgumentParser(
        usage="""\n{0} [--debug]
OR
{0} --verbose
OR
{0} --help

\033[1mEXAMPLES:\033[0m
    \033[1;32m# Run \033[0m
    > {0}
""" .format (os.path.basename(args[0])),

description=description,

formatter_class=argparse.ArgumentDefaultsHelpFormatter
)

    CIME.utils.setup_standard_logging_options(parser)

    parser.add_argument("buildroot",
                        help="build path root")

    parser.add_argument("installpath",
                        help="install path ")

    parser.add_argument("caseroot", nargs="?", default=os.getcwd(),
                        help="Case directory to build")

    args = CIME.utils.parse_args_and_handle_standard_logging_options(args, parser)

    return args.buildroot, args.installpath, args.caseroot

def buildlib(bldroot, installpath, caseroot):
###############################################################################
    with Case(caseroot, read_only=False) as case:
        srcroot = case.get_value("SRCROOT")
        fms_dir = os.path.join(srcroot,"libraries","FMS")

        compiler    = case.get_value("COMPILER")
        ninst_value = case.get_value("NINST_VALUE")
        esmfdir     = "esmf" if case.get_value("USE_ESMF_LIB") else "noesmf"
        debug       = case.get_value("DEBUG")
        debugdir    = "debug" if debug else "nodebug"
        build_threaded      = case.get_build_threaded()
        threaddir   = "threads" if build_threaded else "nothreads"
        mpilib      = case.get_value("MPILIB")
        comp_interface      = case.get_value("COMP_INTERFACE")
        sharedpath  = os.path.join(compiler, mpilib, debugdir, threaddir, comp_interface, comp_interface, esmfdir, ninst_value, "include")


        if not os.path.isdir(os.path.join(bldroot,"FMS")):
            os.makedirs(os.path.join(bldroot,"FMS"))

        filepath = []
        # put src_override directory at head of Filepath to use CESM interface versions of the FMS files.
        filepath.append(os.path.join(fms_dir,"src_override"))
        for _dir in glob.iglob(os.path.join(fms_dir,"src","*")):
            if os.path.isdir(_dir) and not "cime_config" in _dir:
                filepath.append(os.path.join(fms_dir, _dir))
        with open(os.path.join(installpath,"Filepath"), "w") as fd:
            for path in filepath:
                fd.write(path+"\n")
        # Tell mkSrcfiles to ignore files beginning in test_
        os.environ["mkSrcfiles_skip_prefix"] = "test_"
        gmake_opts = "-f {} ".format(os.path.join(fms_dir,"Makefile.cesm"))
        gmake_opts += " -C {} ".format(installpath)
        gmake_opts += "CASEROOT={} ".format(caseroot)
        gmake_opts += "USER_INCLDIR=\"-I{} -I{} -I{} -I{}\"".format(os.path.join(fms_dir,"src","include"),
                                                               os.path.join(fms_dir,"src","mpp","include"),
                                                               os.path.join(bldroot,sharedpath), os.path.join(bldroot,"FMS"))
        gmake_opts += " COMPLIB=libfms.a "
        gmake_opts += get_standard_makefile_args(case)
        gmake_cmd = case.get_value("GMAKE")

        # This runs the FMS build
        cmd = "{} {}".format(gmake_cmd, gmake_opts)
        run_bld_cmd_ensure_logging(cmd, logger)


def _main(argv, documentation):
    bldroot, installpath, caseroot = parse_command_line(argv, documentation)
    buildlib(bldroot, installpath, caseroot)

if (__name__ == "__main__"):
    _main(sys.argv, __doc__)
